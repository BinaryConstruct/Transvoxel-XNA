using System;
using System.Threading;

namespace TransvoxelXnaStudio.Framework
{
    public static class EventArgExtensions
    {
        public static void Raise<TEventArgs>(this TEventArgs e, Object sender, ref EventHandler<TEventArgs> eventDelegate)
            where TEventArgs : EventArgs
        {
            // Copy a reference to the delegate field now into a temp field for thread safety
            EventHandler<TEventArgs> temp = Interlocked.CompareExchange(ref eventDelegate, null, null);

            // If any methods registered interest with our event, notify them
            if (temp != null) temp(sender, e);
        }
    }

    /// <summary>
    /// EventArgs is the base class for classes containing event data. 
    /// </summary>
    /// <typeparam name="T">The type of the event data generated by the event.</typeparam>
    public class EventArgs<T> : EventArgs
    {
        private readonly T _mValue1;

        /// <summary>
        /// Create a new instance of EventArgs.
        /// </summary>
        /// <param name="value1">The data generated by the event.</param>
        public EventArgs(T value1)
        {
            _mValue1 = value1;
        }

        /// <summary>
        /// The value generated by the event.
        /// </summary>
        public T Value1
        {
            get { return _mValue1; }
        }
    }
}